# TODO: check refactored version, maybe add dev image

# syntax=docker/dockerfile:1.6

# ----------- BASE ARGUMENTS -----------
ARG BASE_IMAGE=ubuntu:22.04
ARG PYTHON_VERSION=3.11
ARG UV_VERSION=0.6.13
ARG USER=docker_user

# ----------- BUILDER STAGE -----------
FROM ${BASE_IMAGE} AS builder

# Avoid interactive prompts
ARG DEBIAN_FRONTEND=noninteractive

# Install essential tools
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
    curl \
    ca-certificates \
    build-essential && \
    rm -rf /var/lib/apt/lists/*

# Copy uv binary
COPY --from=ghcr.io/astral-sh/uv:${UV_VERSION} /uv /uvx /bin/

# Environment configuration
ENV UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    PYTHONOPTIMIZE=1 \
    UV_PROJECT_ENVIRONMENT=/venv \
    UV_PYTHON_INSTALL_DIR=/python \
    PATH="/venv/bin:$PATH" \
    UV_PYTHON_PREFERENCE=only-managed \
    UV_HTTP_TIMEOUT=3600

# Install Python
RUN uv python install ${PYTHON_VERSION}
ENV UV_PYTHON_DOWNLOADS=never

# Create working directory
WORKDIR /app

# Install production dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source="pyproject.toml",target=pyproject.toml \
    --mount=type=bind,source="uv.lock",target=uv.lock \
    uv sync --frozen --no-dev

# Install dev dependencies conditionally
ARG DEV_ENV="0"
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source="pyproject.toml",target=pyproject.toml \
    --mount=type=bind,source="uv.lock",target=uv.lock \
    if [ "$DEV_ENV" != "0" ]; then \
        uv sync; \
    fi

# Install pip for convenience
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install pip

# Copy full application code
COPY . .

# ----------- FINAL STAGE -----------
FROM ${BASE_IMAGE} AS final

# Reuse base configuration
ARG DEBIAN_FRONTEND=noninteractive
ARG UV_VERSION
ARG USER

# Install minimal tools for runtime (no compilers)
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
    curl \
    ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Copy uv binary
COPY --from=ghcr.io/astral-sh/uv:${UV_VERSION} /uv /uvx /bin/

# Set runtime env
ENV PYTHONOPTIMIZE=1 \
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    UV_PROJECT_ENVIRONMENT=/venv \
    PATH="/venv/bin:$PATH"

# Copy python + venv
COPY --from=builder /python /python
COPY --from=builder /venv /venv

# Create non-root user
RUN useradd -m -u 1000 ${USER}

# Copy app code (last so it's cache-friendly during rebuilds)
COPY --from=builder /app /app

# Switch to non-root user
USER ${USER}
WORKDIR /app

# Use exec form for CMD
CMD ["python", "main.py"]
